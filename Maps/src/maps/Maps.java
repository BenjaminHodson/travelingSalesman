
package maps;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.JPanel;


public class Maps extends javax.swing.JFrame {

    public static File file = null;
    public static ArrayList<City> Citys = new ArrayList<>();
    public ArrayList<Road> roads = new ArrayList<>();
    public ArrayList<Road> allRoads = new ArrayList<>();
    public City startCity = null;
    public City endCity = null;
    public ArrayList<City> DistancePath = null;
    public ArrayList<City> TimePath = null;

   
    public Maps() {
        initComponents();
    }

    public class MyPanel extends JPanel {

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            DrawMain(g);
            if (DistancePath != null && TimePath != null) {
                paintPaths(g);

            }

        }

        public void DrawMain(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            RenderingHints rh = new RenderingHints(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHints(rh);
            g2.setColor(Color.red);

            g2.setFont(new java.awt.Font("Courier New", 1, 11));
            for (int i = 0; i < roads.size(); i++) {
                g2.drawLine(roads.get(i).StartCity.x, roads.get(i).StartCity.y, roads.get(i).EndCity.x, roads.get(i).EndCity.y);

            }
            g2.setColor(Color.black);
            for (int i = 0; i < Citys.size(); i++) {
                g.fillOval(Citys.get(i).x - 2, Citys.get(i).y - 2, 5, 5);
                g2.setColor(Color.black);
                g.drawString(Citys.get(i).name, Citys.get(i).x, Citys.get(i).y - 5);
            }
            if (startCity != null && endCity != null) {
                g2.setColor(Color.GREEN);
                g2.fillOval(startCity.x - 3, startCity.y - 3, 6, 6);
                g2.drawString(startCity.name, startCity.x, startCity.y - 5);
                g2.setColor(Color.red);
                g2.fillOval(endCity.x - 3, endCity.y - 3, 6, 6);
                g2.drawString(endCity.name, endCity.x, endCity.y - 5);

            }

            DisplayArea.repaint();
        }

        public void paintPaths(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            RenderingHints rh = new RenderingHints(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHints(rh);
            g2.setStroke(new BasicStroke(5));
            g2.setColor(Color.BLUE);
            for (int i = 0; i < DistancePath.size() - 1; i++) {
                g2.drawLine(DistancePath.get(i).x, DistancePath.get(i).y, DistancePath.get(i + 1).x, DistancePath.get(i + 1).y);

            }
            g2.setColor(Color.red);
            g2.setStroke(new BasicStroke(3));
            for (int i = 0; i < TimePath.size() - 1; i++) {
                g2.drawLine(TimePath.get(i).x, TimePath.get(i).y, TimePath.get(i + 1).x, TimePath.get(i + 1).y);

            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DirectButton = new javax.swing.JButton();
        LoadFileButton = new javax.swing.JButton();
        InstLabel = new javax.swing.JLabel();
        DisplayArea = new MyPanel();
        TimeDisplay = new javax.swing.JLabel();
        TimeLabel = new javax.swing.JLabel();
        DistanceLabel = new javax.swing.JLabel();
        DistanceDisplay = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maps");
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        DirectButton.setText("Directions");
        DirectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirectButtonActionPerformed(evt);
            }
        });

        LoadFileButton.setText("Load File");
        LoadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileButtonActionPerformed(evt);
            }
        });

        InstLabel.setText("Click load file ------>");

        DisplayArea.setBackground(new java.awt.Color(255, 255, 255));
        DisplayArea.setPreferredSize(new java.awt.Dimension(1000, 650));
        DisplayArea.setRequestFocusEnabled(false);
        DisplayArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DisplayAreaMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout DisplayAreaLayout = new javax.swing.GroupLayout(DisplayArea);
        DisplayArea.setLayout(DisplayAreaLayout);
        DisplayAreaLayout.setHorizontalGroup(
            DisplayAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1052, Short.MAX_VALUE)
        );
        DisplayAreaLayout.setVerticalGroup(
            DisplayAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 650, Short.MAX_VALUE)
        );

        TimeDisplay.setText("Fastest time (Minutes): ");

        TimeLabel.setText("     ");

        DistanceLabel.setText("Shortest Distance (Miles):");

        DistanceDisplay.setText("     ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DisplayArea, javax.swing.GroupLayout.PREFERRED_SIZE, 1052, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TimeDisplay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeLabel)
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DistanceLabel)
                                .addGap(1, 1, 1)
                                .addComponent(DistanceDisplay)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DirectButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(InstLabel)
                                .addGap(58, 58, 58)
                                .addComponent(LoadFileButton)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DistanceDisplay)
                            .addComponent(DistanceLabel))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TimeLabel)
                            .addComponent(TimeDisplay)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LoadFileButton)
                            .addComponent(InstLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(DirectButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                .addComponent(DisplayArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileButtonActionPerformed

        String fileName = GetFileName();
        if (fileName != "" && fileName != "TMFError") {
            file = new File(GetFileName());
            loadFile();
        } else if (fileName == "TMFError") {
            System.out.println("File loading failed.");
            InstLabel.setText("To many .cvs files in the root directery. Remove one of the files");

        } else {
            System.out.println("File loading failed");
            InstLabel.setText("Failed to load. Did you drop a .csv file into the root directory of the program?");
        }


    }//GEN-LAST:event_LoadFileButtonActionPerformed

    private void DisplayAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DisplayAreaMouseClicked

        int mouseX = evt.getX();
        int mouseY = evt.getY();
        if (startCity != null && endCity != null) {
            startCity = endCity;
            for (int i = 0; i < Citys.size(); i++) {
                if (mouseX - Citys.get(i).x <= 10 && mouseX - Citys.get(i).x >= -10 && mouseY - Citys.get(i).y <= 10 && mouseY - Citys.get(i).y >= -10) {
                    endCity = Citys.get(i);
                    break;

                }
            }
            System.out.println(startCity);
        }

        if (startCity == null || endCity == null) {
            if (startCity == null) {
                for (int i = 0; i < Citys.size(); i++) {
                    if (mouseX - Citys.get(i).x <= 10 && mouseX - Citys.get(i).x >= -10 && mouseY - Citys.get(i).y <= 10 && mouseY - Citys.get(i).y >= -2) {
                        startCity = Citys.get(i);
                        break;
                    }
                }
            } else {
                for (int i = 0; i < Citys.size(); i++) {
                    if (mouseX - Citys.get(i).x <= 10 && mouseX - Citys.get(i).x >= -10 && mouseY - Citys.get(i).y <= 10 && mouseY - Citys.get(i).y >= -2) {
                        endCity = Citys.get(i);
                        break;
                    }
                }
            }
        }

        DisplayArea.repaint();


    }//GEN-LAST:event_DisplayAreaMouseClicked

    private void DirectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirectButtonActionPerformed
        if (startCity != null && endCity != null) {
            DistanceMetric distance = new DistanceMetric();
            TimeMetric time = new TimeMetric();
            ComputePaths(distance, startCity);
            DistancePath = Paths();
            ComputePaths(time, startCity);
            TimePath = Paths();
            DisplayArea.repaint();
            pathReport();

        }
    }//GEN-LAST:event_DirectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maps.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maps.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maps.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maps.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Maps().setVisible(true);
            }
        });
    }

    public void loadFile() {
        String line;
        BufferedReader br = null;
        boolean Roads = false;
        int count = 0;
        if (file != null) {
            try {
                br = new BufferedReader(new FileReader(file));
                while ((line = br.readLine()) != null) {
                    if (line.contains(",,,,")) {
                        Roads = true;
                    }
                    if (Roads == false) {
                        line = line.substring(0, line.length() - 2);
                        String[] TempAry = line.split(",");
                        String name = TempAry[0];
                        int SetX = Integer.parseInt(TempAry[1]);
                        int SetY = Integer.parseInt(TempAry[2]);
                        Citys.add(new City(name, SetX, SetY, count));
                        count++;
                    }
                    if (Roads == true) {
                        if (!line.contains(",,,,")) {
                            City Start = null;
                            City End = null;
                            String[] TempAry = line.split(",");
                            String name = TempAry[0];
                            Start = GetCity(TempAry[1]);
                            End = GetCity(TempAry[2]);
                            int len = Integer.parseInt(TempAry[3]);
                            int time = Integer.parseInt(TempAry[4]);
                            if (Start == null || End == null) {
                                System.out.println("Error, City is null");
                                System.exit(10);
                            }

                            Start.addRoad(new Road(name, Start, End, len, time));
                            allRoads.add(new Road(name, Start, End, len, time));
                            End.addRoad(new Road(name, End, Start, len, time));
                            allRoads.add(new Road(name, End, Start, len, time));
                            roads.add(new Road(name, Start, End, len, time));

                        }

                    }

                }

            } catch (FileNotFoundException e) {
                System.out.println("File not found");
            } catch (IOException e) {
                e.printStackTrace();

            }

        }
        Report();
    }

    public static void Report() {
        for (int i = 0; i < Citys.size(); i++) {
            System.out.println(Citys.get(i).toString());
            Citys.get(i).PrintRoads();
        }
    }

    public void pathReport() {
        System.out.println("-----------------------------------------------DISTANCE REPORT-----------------------------------------------");
        ArrayList<Road> TimeRoads = new ArrayList<Road>();
        ArrayList<Road> DistanceRoads = new ArrayList<Road>();
        City start = null;
        City stop = null;
        int TotalTime = 0;
        for (int i = 0; i < TimePath.size() - 1; i++) {
            start = TimePath.get(i);
            stop = TimePath.get(i + 1);
            for (int r = 0; r < allRoads.size(); r++) {
                if (allRoads.get(r).StartCity.name.equals(start.name) && allRoads.get(r).EndCity.name.equals(stop.name)) {
                    TimeRoads.add(allRoads.get(r));
                    TotalTime += allRoads.get(r).time;
                }
            }

        }
        int TotalDist = 0;
        for (int i = 0; i < DistancePath.size() - 1; i++) {
            start = DistancePath.get(i);
            stop = DistancePath.get(i + 1);
            for (int r = 0; r < allRoads.size(); r++) {
                if (allRoads.get(r).StartCity.name.equals(start.name) && allRoads.get(r).EndCity.name.equals(stop.name)) {
                    DistanceRoads.add(allRoads.get(r));
                    TotalDist += allRoads.get(r).length;
                }
            }

        }
        System.out.println("Shortest Distance: " + TotalDist);
        DistanceDisplay.setText(Integer.toString(TotalDist));
        System.out.println("Start at: " + startCity.name);
        for (int i = 0; i < DistanceRoads.size(); i++) {
            System.out.println("Leg " + i + 1 + " is " + (DistanceRoads.get(i).toString().trim()));
        }
        System.out.println("Arrived at: " + endCity.name);

        System.out.println("-----------------------------------------------TIME REPORT-----------------------------------------------");
        System.out.println("Fastest Route: " + TotalTime + " (Minutes)");
        TimeLabel.setText(Integer.toString(TotalTime));
        System.out.println("Start at: " + startCity.name);
        for (int i = 0; i < DistanceRoads.size(); i++) {
            System.out.println("Leg " + i + 1 + " is " + (DistanceRoads.get(i).toString().trim()));
        }
        System.out.println("Arrived at: " + endCity.name);

    }

    public static City GetCity(String name) {
        for (int i = 0; i < Citys.size(); i++) {
            if (name.equals(Citys.get(i).getName())) {
                return Citys.get(i);
            }
        }
        return null;
    }

    public static void ComputePaths(RoadMetric roadM, City source) {

        source.minDistance = 0.;
        PriorityQueue<City> CityQueue = new PriorityQueue<>();
        CityQueue.add(source);

        while (!CityQueue.isEmpty()) {
            City u = CityQueue.poll();

            for (Road e : u.Roads) {
                City v = e.EndCity;
                int weight = roadM.getMetric(e);
                double distanceThroughU = u.minDistance + weight;
                if (distanceThroughU < v.minDistance) {
                    CityQueue.remove(v);
                    v.minDistance = distanceThroughU;
                    v.previous = u;
                    CityQueue.add(v);

                }

            }
        }

    }

    public ArrayList<City> Paths() {
        ArrayList<City> path = new ArrayList<>();
        path.clear();
        for (City city = endCity; city != null; city = city.previous) {
            path.add(city);
        }

        Collections.reverse(path);

        return path;
    }

    public static String GetFileName() {
        int FileCount = 0;
        String FileName = "";
        File folder = new File("./");
        File[] listOfFiles = folder.listFiles();
        for (File listOfFile : listOfFiles) {
            if (listOfFile.isFile()) {
                if (listOfFile.getName().contains(".csv")) {
                    FileCount++;
                    FileName = listOfFile.getName();
                }
            }
        }
        System.out.println(FileCount);
        if (FileCount != 1) {
            System.out.println("TMFError");
            return "TMFError";
        } else if (FileCount == 0) {
            System.out.println("No file");
            return "";
        } else {
            return FileName;
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DirectButton;
    private javax.swing.JPanel DisplayArea;
    private javax.swing.JLabel DistanceDisplay;
    private javax.swing.JLabel DistanceLabel;
    private javax.swing.JLabel InstLabel;
    private javax.swing.JButton LoadFileButton;
    private javax.swing.JLabel TimeDisplay;
    private javax.swing.JLabel TimeLabel;
    // End of variables declaration//GEN-END:variables

}
